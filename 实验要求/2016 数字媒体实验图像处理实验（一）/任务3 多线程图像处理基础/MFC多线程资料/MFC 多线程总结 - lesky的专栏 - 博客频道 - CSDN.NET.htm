<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>MFC 多线程总结 - lesky的专栏 - 博客频道 - CSDN.NET</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="description" content="(一) MFC对多线程编程的支持　&#160;&#160;&#160; &#160;&#160;&#160; &#160;&#160;&#160; MFC中有两类线程，分别称之为工作者线程和用户界面线程。二者的主要区别在于工作者线程没有消息循环，而用户界面线程有自己的消息队列和消息循环。 　　&#160;&#160;&#160; &#160;&#160;&#160; 工作者线程没有消息机制，通常用来执行后台计算和维护任务，如冗长的计算过程，打印机的后台打印等。用户界面线程一般用于处理独立于其他线程执行之外 的用户输入，响应用户及系统所产生的事件" />
<script src="http://static.blog.csdn.net/scripts/jquery.js" type="text/javascript"></script>
<script src="http://static.blog.csdn.net/scripts/plugins.js" type="text/javascript"></script>
<script src="http://static.blog.csdn.net/scripts/common.js?v=1.2" type="text/javascript"></script>
<link rel="Stylesheet" type="text/css" href="http://static.blog.csdn.net/skin/default/css/style.css" />
<link id="RSSLink" title="RSS" type="application/rss+xml" rel="alternate" href="/lesky/rss/list" />
<link rel="shortcut icon" href="/favicon.ico" />
<link type="text/css" rel="stylesheet" href="http://static.blog.csdn.net/scripts/SyntaxHighlighter/styles/default.css" />
</head>
<body>
<script src="http://csdnimg.cn/pubnav/js/pub_topnav_2011.js"type="text/javascript"></script>
<div id="container">
<div id="header">
    <div class="header">
        <div id="blog_title">
            <h1><a href="/lesky">lesky的专栏</a></h1>
            <h2>Dream is not illusion.</h2>
            <div class="clear"></div>
        </div>
        <div class="clear"></div>
    </div>
</div>
<div id="navigator">
    <div class="navigator_bg"></div>
    <div class="navigator">
        <ul>
            <li id="btnContents"><a href="/lesky?viewmode=contents"><span><img src="http://static.blog.csdn.net/images/ico_list.gif">目录视图</span></a></li>
            <li id="btnView"><a href="/lesky?viewmode=list"><span><img src="http://static.blog.csdn.net/images/ico_summary.gif">摘要视图</span></a></li>
            <li id="btnRss"><a href="/lesky/rss/list"><span><img src="http://static.blog.csdn.net/images/ico_rss.gif">订阅</span></a></li>
</ul>
    </div>
</div>
<script type="text/javascript">
    var username = "lesky";
    var blog_address = "http://blog.csdn.net/lesky";
    var static_host = "http://static.blog.csdn.net";
    var currentUserName = "";
</script>
        
<div id="body">
<div id="main">
<div class="main">
<div class="notice"> 

<a href="http://blog.csdn.net/blogdevteam/article/details/8055079" target="_blank">
<font color=red>
“移动开发那点事”——主题征文活动 </font></a>

&nbsp;&nbsp;


<a href="http://hbtc2012.hadooper.cn/"target="_blank">
<font color=red> 浓缩六届精华，国内大数据领域最纯粹技术盛会</font></a>

&nbsp;&nbsp;&nbsp;


<a href="http://blog.csdn.net/liushizao/article/details/8012164"target="_blank">
<font color=red>CSDN高校俱乐部专家巡讲讲师招募  </font></a>

<br />





<a href="http://blog.csdn.net/csdnproduct/article/details/8071931  "target="_blank">
<font color=red>新版论坛全民公测！
 </font></a>

&nbsp;&nbsp;

<a href="http://blog.csdn.net/blogdevteam/article/details/8052186"target="_blank">
<font color=blue>2012年10月当选微软MVP的CSDN会员名单！   </font></a>

&nbsp;&nbsp;

<a href="http://blog.csdn.net/blogdevteam/article/details/8097748"target="_blank">
<font color=red>JavaEE Web应用开发平台WebBuilder团队专访   </font></a>

</div><script type="text/javascript" src="http://static.blog.csdn.net/scripts/ad.js"></script>

<div id="article_details" class="details">
    <div class="article_title">
    <span class="ico ico_type_Original"></span>
    <h3>
        <span class="link_title"><a href="/lesky/article/details/2494428">
        MFC 多线程总结
        </a></span>
    </h3>
</div>

        
    <div class="article_manage">
        <span class="link_categories">
        分类：
            <a href="/lesky/article/category/254303">C/C++</a> 
        </span>
    <span class="link_postdate">2008-05-29 19:51</span>
    <span class="link_view" title="阅读次数">15742人阅读</span>
    <span class="link_comments" title="评论次数"><a href="#comments">评论</a>(12)</span>
    <span class="link_collect"><a href="javascript:void(0);" onclick="javascript:collectArticle('MFC 多线程总结','2494428');return false;" title="收藏">收藏</a></span>
    <span class="link_report"><a href="#report"  onclick="javascript:report(2494428,2);return false;" title="举报">举报</a></span>
    
</div>

    
<div id="article_content" class="article_content">
<font size="3"><strong><font size="2">(一) MFC对多线程编程的支持</font><br /></strong></font>　&nbsp;&nbsp;&nbsp; <br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; MFC中有两类线程，分别称之为工作者线程和用户界面线程。二者的主要区别在于工作者线程没有消息循环，而用户界面线程有自己的消息队列和消息循环。<br /> 　　<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 工作者线程没有消息机制，通常用来执行后台计算和维护任务，如冗长的计算过程，打印机的后台打印等。用户界面线程一般用于处理独立于其他线程执行之外 的用户输入，响应用户及系统所产生的事件和消息等。但对于Win32的API编程而言，这两种线程是没有区别的，它们都只需线程的启动地址即可启动线程来 执行任务。<br /><br />　&nbsp;&nbsp;&nbsp; 在MFC中，一般用全局函数AfxBeginThread()来创建并初始化一个线程的运行，该函数有两种重载形式，分别用于创建工作者线程和用户界面线程。两种重载函数原型和参数分别说明如下：
<pre> (1) CWinThread* AfxBeginThread(AFX_THREADPROC pfnThreadProc,<br />                      LPVOID pParam,<br />                      nPriority=THREAD_PRIORITY_NORMAL,<br />                      UINT nStackSize=0,<br />                      DWORD dwCreateFlags=0,<br />                      LPSECURITY_ATTRIBUTES lpSecurityAttrs=NULL);<span style="font-family: Arial,Verdana,Sans-Serif;"><br /><br />	</span>PfnThreadProc:指向工作者线程的执行函数的指针，线程函数原型必须声明如下： </pre>
<pre>    UINT ExecutingFunction(LPVOID pParam);<br /></pre>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 请注意，ExecutingFunction()应返回一个UINT类型的值，用以指明该函数结束的原因。一般情况下，返回0表明执行成功。
<ul>
    <li>pParam：传递给线程函数的一个32位参数，执行函数将用某种方式解释该值。它可以是数值，或是指向一个结构的指针，甚至可以被忽略；</li>
    <li>nPriority：线程的优先级。如果为0，则线程与其父线程具有相同的优先级；</li>
    <li>nStackSize:线程为自己分配堆栈的大小，其单位为字节。如果nStackSize被设为0，则线程的堆栈被设置成与父线程堆栈相同大小；</li>
    <li>dwCreateFlags：如果为0，则线程在创建后立刻开始执行。如果为CREATE_SUSPEND，则线程在创建后立刻被挂起；</li>
    <li>lpSecurityAttrs：线程的安全属性指针，一般为NULL；</li>
</ul>
<pre> (2) CWinThread* AfxBeginThread(CRuntimeClass* pThreadClass,<br />                      int nPriority=THREAD_PRIORITY_NORMAL,<br />                      UINT nStackSize=0,<br />                      DWORD dwCreateFlags=0,<br />                      LPSECURITY_ATTRIBUTES lpSecurityAttrs=NULL);<br /></pre>
pThreadClass 是指向 CWinThread  		的一个导出类的运行时类对象的指针，该导出类定义了被创建的用户界面线程的启动、退出等；其它参数的意义同形式1。使用函数的这个原型生成的线程也有消息机制，此消息机制同主线程的机制几乎一样。<br /><br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 在工作线程中使用的函数指针一般是指向全局函数的而不是类成员函数，因为这牵扯到对象的生命周期，如果一个对象在线程执行时被销毁了，那么这个线程的行为就成为不确定的了。<br /><br />
<p><font size="3"><strong><font size="2">(二) 线程间通讯</font></strong></font></p>
<p> 		　　一般而言,应用程序中的一个次要线程总是为主线程执行特定的任务,这样,主线程和次要线程间必定有一个信息传递的渠道,也就是主线程和次要线程间要进行通信。这种线程间的通信不但是难以避免的，而且在多线程编程中也是复杂和频繁的，下面将进行说明。</p>
<ol>
    <li>使用全局变量进行通信<br /> 		<br /> 		由于属于同一个进程的各个线程共享操作系统分配该进程的资源，故解决线程间通信最简单的一种方法是使用全局变量。对于标准类型的全局变量，建议使用volatile  		修饰符，它告诉编译器无需对该变量作任何的优化，即无需将它放到一个寄存器中，并且该值可被外部改变。如果线程间所需传递的信息较复杂，我们可以定义一个结构，通过传递指向该结构的指针进行传递信息。<br /> 　</li>
    <li>使用自定义消息<br /> 		<br /> 我们可以在一个线程的执行函数中向另一个线程发送自定义的消息来达到通信的目的。一个线程向另外一个线程发送消息是通过操作系统实现的。利用 Windows操作系统的消息驱动机制，当一个线程发出一条消息时，操作系统首先接收到该消息，然后把该消息转发给目标线程，接收消息的线程必须已经建立 了消息循环。</li>
</ol>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;  例如，我们想增加一个用户自定义消息WM_USER_THREADEND 其方法是：<br /><br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp; 1.&nbsp; 在头文件stdafx.h中增加一个自定义消息宏&nbsp; <br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; #define WM_USER_THREADEND WM_USER + 1<br /><br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp; 2.&nbsp; 在于增加新消息的窗口或对话框类的头文件中增加一个回调函数声明，注意要声明为public<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; afx_msg LRESULT OnUserThreadend(WPARAM wParam, LPARAM lParam);<br /><br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp; 3.&nbsp; 在窗口或对话框的cpp文件的BEGIN_MESSAGE_MAP，END_MESSAGE_MAP 中增加一行&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  &nbsp;&nbsp;  <br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp; ON_MESSAGE(WM_USER_THREADEND, OnUserThreadend) <br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  <br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 4.&nbsp; 在窗口或对话框的cpp文件中增加回调函数的实现，如：<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  LRESULT ThreadDialog::OnUserThreadend(WPARAM wParam, LPARAM lParam) <br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; TRACE(&quot;WM_USER_THREADEND message /n&quot;);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return 0;<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  <br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.&nbsp; 自定义消息的触发<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  ::PostMessage(GetSafeHwnd(), WM_USER_THREADEND, 0, 0);<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp;&nbsp;  &nbsp; 其中GetSafeHwnd()得到了一个当前窗口的句柄，此消息将发给当前窗口，如果想发送消息给其它&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 窗口只需改变这个句柄，前提是目的窗口也实现了此消息的处理函数。<br /><br /><font size="3"><strong><font size="2">(三) 线程同步<br /></font></strong></font>
<p> 　　虽然多线程能给我们带来好处，但是也有不少问题需要解决。例如，对于像磁盘驱动器这样独占性系统资源，由于线程可以执行进程的任何代码段，且线程的运 行是由系统调度自动完成的，具有一定的不确定性，因此就有可能出现两个线程同时对磁盘驱动器进行操作，从而出现操作错误；又例如，对于银行系统的计算机来 说，可能使用一个线程来更新其用户数据库，而用另外一个线程来读取数据库以响应储户的需要，极有可能读数据库的线程读取的是未完全更新的数据库，因为可能 在读的时候只有一部分数据被更新过。<br /> 		<br /> 		　　使隶属于同一进程的各线程协调一致地工作称为线程的同步。MFC提供了多种同步对象，下面我们只介绍最常用的四种：</p>
<ul>
    <li>临界区（CCriticalSection）</li>
    <li>事件（CEvent）</li>
    <li>互斥量（CMutex）</li>
    <li>信号量（CSemaphore）</li>
</ul>
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 通过这些类，我们可以比较容易地做到线程同步。
<p> 		<strong><em>A、使用 CCriticalSection 类</em></strong></p>
<p> 　　当多个线程访问一个独占性共享资源时,可以使用&ldquo;临界区&rdquo;对象。任一时刻只有一个线程可以拥有临界区对象，拥有临界区的线程可以访问被保护起来的资源 或代码段，其他希望进入临界区的线程将被挂起等待，直到拥有临界区的线程放弃临界区时为止，这样就保证了不会在同一时刻出现多个线程访问共享资源。<br /> 		<br /> 		CCriticalSection类的用法非常简单，步骤如下： 		</p>
<ol>
    <li>定义CCriticalSection类的一个全局对象（以使各个线程均能访问），如CCriticalSection  		critical_section；</li>
    <li>在访问需要保护的资源或代码之前，调用CCriticalSection类的成员Lock（）获得临界区对象：
    <pre>critical_section.Lock();<br /></pre>
    在线程中调用该函数来使线程获得它所请求的临界区。如果此时没有其它线程占有临界区对象，则调用Lock()的线程获得临界区；否则，线程将被挂起，并放入到一个系统队列中等待，直到当前拥有临界区的线程释放了临界区时为止。 			 			</li>
    <li> 访问临界区完毕后，使用CCriticalSection的成员函数Unlock()来释放临界区：
    <pre>critical_section.Unlock();<br /></pre>
    再通俗一点讲，就是线程A执行到critical_section.Lock();语句时，如果其它线程(B)正在执行 critical_section.Lock();语句后且critical_section. Unlock();语句前的语句时，线程A就会等待，直到线程B执行完critical_section. Unlock();语句，线程A才会继续执行。 </li>
</ol>
<p><strong><em>B、使用 CEvent 类 </em></strong> 		</p>
<p>　　CEvent 类提供了对事件的支持。事件是一个允许一个线程在某种情况发生时，唤醒另外一个线程的同步对象。例如在某些网络应用程序中，一个线程（记为A）负责监听通 讯端口，另外一个线程（记为B）负责更新用户数据。通过使用CEvent 类，线程A可以通知线程B何时更新用户数据。每一个CEvent 对象可以有两种状态：有信号状态和无信号状态。线程监视位于其中的CEvent 类对象的状态，并在相应的时候采取相应的操作。</p>
<p> 　　在MFC中，CEvent 类对象有两种类型：人工事件和自动事件。一个自动CEvent 对象在被至少一个线程释放后会自动返回到无信号状态；而人工事件对象获得信号后，释放可利用线程，但直到调用成员函数ReSetEvent()才将其设置 为无信号状态。在创建CEvent 类的对象时，默认创建的是自动事件。 CEvent 类的各成员函数的原型和参数说明如下：</p>
<pre>1、CEvent(BOOL bInitiallyOwn=FALSE,<br />          BOOL bManualReset=FALSE,<br />          LPCTSTR lpszName=NULL,<br />          LPSECURITY_ATTRIBUTES lpsaAttribute=NULL);<br /></pre>
<ul>
    <li>bInitiallyOwn:指定事件对象初始化状态，TRUE为有信号，FALSE为无信号；</li>
    <li>bManualReset：指定要创建的事件是属于人工事件还是自动事件。TRUE为人工事件，FALSE为自动事件；</li>
    <li>后两个参数一般设为NULL，在此不作过多说明。</li>
</ul>
<pre>2、BOOL CEvent：：SetEvent();<br /></pre>
将 CEvent 类对象的状态设置为有信号状态。如果事件是人工事件，则 CEvent 类对象保持为有信号状态，直到调用成员函数ResetEvent()将 其重新设为无信号状态时为止。如果CEvent 类对象为自动事件，则在SetEvent()将事件设置为有信号状态后，CEvent 类对象由系统自动重置为无信号状态。<br /> 		<br /> 		如果该函数执行成功，则返回非零值，否则返回零。
<pre>3、BOOL CEvent：：ResetEvent();</pre>
该函数将事件的状态设置为无信号状态，并保持该状态直至SetEvent()被调用时为止。由于自动事件是由系统自动重置，故自动事件不需要调用该函 数。如果该函数执行成功，返回非零值，否则返回零。我们一般通过调用WaitForSingleObject函数来监视事件状态。<br /><br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 对于Event对象我们有两种实现方法，一个是CEvent，这是MFC提供给我们的，另外一个就是使用CreateEvent函数，此函数的定义如下：<br /><font size="2"><br /></font>
<div style="text-align: left;"><font size="2">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; HANDLE CreateEvent(   <br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; LPSECURITY_ATTRIBUTES <em><a href="" onclick="showTip(this)" class="synParam">lpEventAttributes</a></em>, <br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; BOOL <em><a href="" onclick="showTip(this)" class="synParam">bManualReset</a></em>,<br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;BOOL <em><a href="" onclick="showTip(this)" class="synParam">bInitialState</a></em>, <br />&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; LPCTSTR <em><a href="" onclick="showTip(this)" class="synParam">lpName</a></em> );<br />&nbsp;<br />&nbsp;&nbsp;&nbsp; &nbsp; 此函数返回一个内核对象的句柄，在一般的情况下CEvent是第一选择，但是在我使用CEvent的过程中WaitForMultipleObjects对CEvent对象并不能很好的工作。<br />&nbsp;&nbsp;&nbsp; &nbsp; WaitForMultipleObjects函数中有一个参数类型是HANDLE*。MSDN上的说明指出此HANDLE指针并不能接收处理CEvent对象，如下：<br /></font>
<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; The <strong>WaitForMultipleObjects</strong> function can specify handles of any of the  following object types in the <em>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; lpHandles</em> array:</p>
<p> </p>
<ul>
    <ul>
        <ul>
            <li>Change notification  </li>
        </ul>
    </ul>
    <ul>
        <ul>
            <li>Console input  </li>
        </ul>
    </ul>
    <ul>
        <ul>
            <li>Event  </li>
        </ul>
    </ul>
    <ul>
        <ul>
            <li>Job  </li>
        </ul>
    </ul>
    <ul>
        <ul>
            <li>Memory resource notification  </li>
            <li>Mutex  </li>
        </ul>
    </ul>
    <ul>
        <ul>
            <li>Process  </li>
        </ul>
    </ul>
    <ul>
        <ul>
            <li>Semaphore  </li>
        </ul>
    </ul>
    <ul>
        <ul>
            <li>Thread  </li>
        </ul>
    </ul>
    <ul>
        <ul>
            <li>Waitable timer </li>
        </ul>
    </ul>
</ul>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  &nbsp;&nbsp;  所以当我们需要使用此函数是只能选择使用内核对象Event。<br /><br />
<p><strong><em>C、使用CMutex 类</em></strong></p>
<p> 		　　互斥对象与临界区对象很像.互斥对象与临界区对象的不同在于:互斥对象可以在进程间使用,而临界区对象只能在同一进程的各线程间使用。当然，互斥对象也可以用于同一进程的各个线程间，但是在这种情况下，使用临界区会更节省系统资源，更有效率。</p>
<p><strong><em>D、使用CSemaphore 类</em></strong></p>
<p>　　当需要一个计数器来限制可以使用某个线程的数目时，可以使用&ldquo;信号量&rdquo;对象。CSemaphore  		类的对象保存了对当前访问某一指定资源的线程的计数值，该计数值是当前还可以使用该资源的线程的数目。如果这个计数达到了零，则所有对这个CSemaphore  		类对象所控制的资源的访问尝试都被放入到一个队列中等待，直到超时或计数值不为零时为止。一个线程被释放已访问了被保护的资源时，计数值减1；一个线程完成了对被控共享资源的访问时，计数值增1。这个被CSemaphore  		类对象所控制的资源可以同时接受访问的最大线程数在该对象的构建函数中指定。<br /> 		<br /> 		CSemaphore 类的构造函数原型及参数说明如下： </p>
<pre>CSemaphore (LONG lInitialCount=1,<br />            LONG lMaxCount=1,<br />            LPCTSTR pstrName=NULL,<br />            LPSECURITY_ATTRIBUTES lpsaAttributes=NULL);<br /></pre>
<ul>
    <li>lInitialCount:信号量对象的初始计数值，即可访问线程数目的初始值；</li>
    <li>lMaxCount：信号量对象计数值的最大值，该参数决定了同一时刻可访问由信号量保护的资源的线程最大数目；</li>
    <li>后两个参数在同一进程中使用一般为NULL，不作过多讨论；</li>
</ul>
<p>　 　在用CSemaphore 类的构造函数创建信号量对象时要同时指出允许的最大资源计数和当前可用资源计数。一般是将当前可用资源计数设置为最大资源计数，每增加一个线程对共享资源 的访问，当前可用资源计数就会减1，只要当前可用资源计数是大于0的，就可以发出信号量信号。但是当前可用计数减小到0时，则说明当前占用资源的线程数已 经达到了所允许的最大数目，不能再允许其它线程的进入，此时的信号量信号将无法发出。线程在处理完共享资源后，应在离开的同时通过 ReleaseSemaphore()函数将当前可用资源数加1。</p>
</div>
<font size="3"><strong /></font>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;  <br /><br /><br /><br /> 		<br /><font size="3"><strong></strong></font>
</div>
<div class="share_buttons" id="sharePanel"></div>
<!--192.168.1.237-->
<div class="article_next_prev">
    <li class="prev_article"><span>上一篇：</span><a href="/lesky/article/details/2471039">MFC 对话框编程要点</a></li>
    <li class="next_article"><span>下一篇：</span><a href="/lesky/article/details/4064364">DLL(Dynamic Link Libraries) 专题</a></li>
</div>


    
</div>
<div id="ad_cen"></div>
<script type="text/javascript">
    new Ad(4, 'ad_cen');
</script>
<div id="comment_title" class="panel_head">查看评论<a name="comments"></a></div>
<div id="comment_list"></div>
<div id="comment_bar"></div>
<div id="comment_form"></div>
<div class="announce">* 以上用户言论只代表其个人观点，不代表CSDN网站的观点或立场<a name="reply"></a><a name="quote"></a></div>
<script type="text/javascript">
    var fileName = '2494428';
    var commentscount = 12;
    var islock = false
</script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/comment.js?v=1.3"></script>
<div id="ad_bot"></div>
<script type="text/javascript">
    new Ad(5, 'ad_bot');
</script>
<div id="report_dialog"></div>

<div id="d-top">
<a href="#" onclick="javascript:document.body.scrollTop=0;document.documentElement.scrollTop=0;this.blur();return false;" title="回到顶部">
<img src="http://static.blog.csdn.net/images/top.png" alt="TOP" /></a>
</div>



<div class="clear"></div>
</div>
</div>

<div id="side">
<div class="side">
<div id="panel_Profile" class="panel">
    <ul class="panel_head"><span>个人资料</span></ul>
    <ul class="panel_body profile">
        <div id="blog_userface">
            <a href="http://my.csdn.net/lesky" target="_blank">
            <img src="http://avatar.csdn.net/E/3/1/1_lesky.jpg" title="访问我的空间" style="max-width:90%"/>
            </a>
            <br />
            <span><a href="http://my.csdn.net/lesky" target="_blank">lesky</a></span>
        </div>
<div class="interact">
<!--<a href="#" class="attented" title="已关注"></a>-->
<a href="#" class="attent" id="span_add_follow" title="[加关注]"></a>
<a href="http://my.csdn.net/my/letter/send/lesky" class="letter" title="[发私信]"></a>
</div>
        <div id="blog_medal">
        </div>
        <ul id="blog_rank">
            <li>访问：<span>90150次</span></li>
            <li>积分：<span>1220分</span></li>
            <li>排名：<span>第6298名</span></li>
        </ul>
        <ul id="blog_statistics">
            <li>原创：<span>36篇</span></li>
            <li>转载：<span>18篇</span></li>
            <li>译文：<span>0篇</span></li>
            <li>评论：<span>28条</span></li>
        </ul>
    </ul>
</div>
<script type="text/javascript">
    var _blogger = 'lesky';
</script>
<script type='text/javascript'>
$(document).ready(function () {
    var un = getUN().toLowerCase();
    if (un == _blogger.toLowerCase()) {
        $('.interact').hide();
    } else if(un) {
        var url = "http://my.csdn.net/index.php/follow/check_is_followed/" + encodeURIComponent(un) + "/" + encodeURIComponent(_blogger) + "?jsonpcallback=?";
        $.getJSON(url, {}, function (data) {
            if (data.succ == 1 && data.info == 1) {
                $('#span_add_follow').attr('class', 'attented');
            } else {
                $('#span_add_follow').click(guanzhu);
            }
        }, 'json');
    }
});
function guanzhu() {
    var url = "http://my.csdn.net/index.php/follow/do_follow?jsonpcallback=?";
    $.getJSON(url, { "username": _blogger }, function (data) {
        if (data.succ == 1) {
            alert('关注成功！');
            $('#span_add_follow').attr('class', 'attented').click(function () { return false; });
        } else {
            alert(data.msg);
        }
    });
    return false;
}
function getUN() {
    var m = document.cookie.match(new RegExp("(^| )UserName=([^;]*)(;|$)"));
    if (m) return m[2];
    else return '';
}
</script>

<div class="panel" id="panel_Search">
    <ul class="panel_head"><span>文章搜索</span></ul>
    <ul class="panel_body">
        <form id="frmSearch" action="http://so.csdn.net/search" class="form_search" target="_blank">
        <span><input id="inputSearch" type="text" class="blogsearch" title="请输入关键字" /></span>
        <input id="btnSubmit" type="submit" value="搜索" title="search in blog" />
        <input type="hidden" name="q" id="inputQ" />
        <input type="hidden" name="t" value="blog" />
        <a id="btnSearchBlog" target="_blank"></a>
        </form>
    </ul>
</div><div id="panel_Category" class="panel">
    <ul class="panel_head"><span>文章分类</span></ul>
    <ul class="panel_body">
        <li>
        <a href="http://blog.csdn.net/lesky/article/category/525806">Boost</a><span>(0)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/lesky/article/category/254303">C/C++</a><span>(14)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/lesky/article/category/254304">Java 编程</a><span>(5)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/lesky/article/category/254302">Linux(Ubuntu)</a><span>(18)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/lesky/article/category/425134">OpenGL  &amp;amp; 高性能计算</a><span>(2)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/lesky/article/category/709353">Python</a><span>(2)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/lesky/article/category/254299">Web server</a><span>(2)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/lesky/article/category/365192">嵌入式</a><span>(6)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/lesky/article/category/254660">心路历程</a><span>(0)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/lesky/article/category/254657">数据库</a><span>(3)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/lesky/article/category/254305">算法与数据结构</a><span>(0)</span>
        </li>
        <li>
        <a href="http://blog.csdn.net/lesky/article/category/254307">设计模式</a><span>(1)</span>
        </li>
    </ul>
</div><div id="panel_Archive" class="panel">
    <ul class="panel_head"><span>文章存档</span></ul>
    <ul class="panel_body">
        <div id="archive_list">
        <!--归档统计-->
        <li><a href="http://blog.csdn.net/lesky/article/month/2010/10">2010年10月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/lesky/article/month/2010/09">2010年09月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/lesky/article/month/2010/07">2010年07月</a><span>(3)</span></li><li><a href="http://blog.csdn.net/lesky/article/month/2009/04">2009年04月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/lesky/article/month/2008/05">2008年05月</a><span>(8)</span></li><li><a href="http://blog.csdn.net/lesky/article/month/2008/03">2008年03月</a><span>(6)</span></li><li><a href="http://blog.csdn.net/lesky/article/month/2008/02">2008年02月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/lesky/article/month/2007/02">2007年02月</a><span>(5)</span></li><li><a href="http://blog.csdn.net/lesky/article/month/2007/01">2007年01月</a><span>(1)</span></li><li><a href="http://blog.csdn.net/lesky/article/month/2006/12">2006年12月</a><span>(4)</span></li><li><a href="http://blog.csdn.net/lesky/article/month/2006/11">2006年11月</a><span>(20)</span></li>
        </div>
    </ul>
</div>
<div id="hotarticls" class="panel">
    <ul class="panel_head"><span>阅读排行</span></ul>
    <ul class="panel_body itemlist">
        <li>
            <a href="/lesky/article/details/2494428" title="MFC 多线程总结">MFC 多线程总结</a><span>(15742)</span>
        </li>
        <li>
            <a href="/lesky/article/details/1460966" title="数据库设计实例 教务管理系统">数据库设计实例 教务管理系统</a><span>(14099)</span>
        </li>
        <li>
            <a href="/lesky/article/details/2224102" title="Linux framebuffer tutorial">Linux framebuffer tutorial</a><span>(10720)</span>
        </li>
        <li>
            <a href="/lesky/article/details/2218850" title="BMP格式分析">BMP格式分析</a><span>(3713)</span>
        </li>
        <li>
            <a href="/lesky/article/details/2225705" title="Fedora Framebuffer 配置">Fedora Framebuffer 配置</a><span>(3090)</span>
        </li>
        <li>
            <a href="/lesky/article/details/1380358" title="Apache httpd.conf配置说明">Apache httpd.conf配置说明</a><span>(2715)</span>
        </li>
        <li>
            <a href="/lesky/article/details/2471039" title="MFC 对话框编程要点">MFC 对话框编程要点</a><span>(2483)</span>
        </li>
        <li>
            <a href="/lesky/article/details/1513602" title="深入浅出Shell 编程：Unix/Linux 命令">深入浅出Shell 编程：Unix/Linux 命令</a><span>(2363)</span>
        </li>
        <li>
            <a href="/lesky/article/details/2159938" title="QT/QTE 编译安装问题与解决之道">QT/QTE 编译安装问题与解决之道</a><span>(2173)</span>
        </li>
        <li>
            <a href="/lesky/article/details/1380167" title="Linux环境java中文乱码解决方案">Linux环境java中文乱码解决方案</a><span>(1979)</span>
        </li>
    </ul>
</div>
<div id="hotarticls2" class="panel">
    <ul class="panel_head"><span>评论排行</span></ul>
    <ul class="panel_body itemlist">
        <li>
            <a href="/lesky/article/details/2494428" title="MFC 多线程总结">MFC 多线程总结</a><span>(12)</span>
        </li>
        <li>
            <a href="/lesky/article/details/1460966" title="数据库设计实例 教务管理系统">数据库设计实例 教务管理系统</a><span>(8)</span>
        </li>
        <li>
            <a href="/lesky/article/details/2111818" title="LPC2131 中断处理">LPC2131 中断处理</a><span>(1)</span>
        </li>
        <li>
            <a href="/lesky/article/details/2218850" title="BMP格式分析">BMP格式分析</a><span>(1)</span>
        </li>
        <li>
            <a href="/lesky/article/details/1461032" title="C++内存管理">C++内存管理</a><span>(1)</span>
        </li>
        <li>
            <a href="/lesky/article/details/2111808" title="LPC2131 UART使用方法简介">LPC2131 UART使用方法简介</a><span>(1)</span>
        </li>
        <li>
            <a href="/lesky/article/details/1508630" title="嵌入式C程序员应该知道的几个基本问题">嵌入式C程序员应该知道的几个基本问题</a><span>(1)</span>
        </li>
        <li>
            <a href="/lesky/article/details/1513176" title="linux进程之fork vs vfork">linux进程之fork vs vfork</a><span>(1)</span>
        </li>
        <li>
            <a href="/lesky/article/details/2101549" title="SPI 使用体会">SPI 使用体会</a><span>(1)</span>
        </li>
        <li>
            <a href="/lesky/article/details/2159938" title="QT/QTE 编译安装问题与解决之道">QT/QTE 编译安装问题与解决之道</a><span>(1)</span>
        </li>
    </ul>
</div>
<div id="homepageArticles" class="panel">
    <ul class="panel_head"><span>推荐文章</span></ul>
    <ul class="panel_body" id="ad_commend">
    </ul>
</div>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/ad.js"></script>
<script type="text/javascript">
    new Ad(12, 'ad_commend');
</script><div id="newcomments" class="panel">
<ul class="panel_head"><span>最新评论</span></ul>
<ul class="panel_body itemlist">
    <li>
    <a href="/lesky/article/details/2494428#comments">MFC 多线程总结</a>
    <p style="margin:0px;">feifei12021:
讲的很好，谢谢
    </p>
    </li>
    <li>
    <a href="/lesky/article/details/2494428#comments">MFC 多线程总结</a>
    <p style="margin:0px;">xahax:
为了弄清楚CSerialPort的机制，这篇文章很有用。感谢作者。
    </p>
    </li>
    <li>
    <a href="/lesky/article/details/2494428#comments">MFC 多线程总结</a>
    <p style="margin:0px;">s330982037:
这个资源很不错 楼主辛苦了
    </p>
    </li>
    <li>
    <a href="/lesky/article/details/2494428#comments">MFC 多线程总结</a>
    <p style="margin:0px;">yayexing:
谢谢。
    </p>
    </li>
    <li>
    <a href="/lesky/article/details/2494428#comments">MFC 多线程总结</a>
    <p style="margin:0px;">danda1314520:
讲得不错哈,xiexie
    </p>
    </li>
    <li>
    <a href="/lesky/article/details/2494428#comments">MFC 多线程总结</a>
    <p style="margin:0px;">hfz8867879:
学到了新知识，谢谢楼主！
    </p>
    </li>
    <li>
    <a href="/lesky/article/details/2494428#comments">MFC 多线程总结</a>
    <p style="margin:0px;">ShuRay:
讲得很清楚！！谢谢楼主！
    </p>
    </li>
    <li>
    <a href="/lesky/article/details/2494428#comments">MFC 多线程总结</a>
    <p style="margin:0px;">poxi007:

    </p>
    </li>
    <li>
    <a href="/lesky/article/details/2494428#comments">MFC 多线程总结</a>
    <p style="margin:0px;">shen1990shen:

    </p>
    </li>
    <li>
    <a href="/lesky/article/details/2494428#comments">MFC 多线程总结</a>
    <p style="margin:0px;">GT1390318001:

    </p>
    </li>
</ul>
</div>
</div>
<div class="clear"></div>
</div>

<div class="clear"></div>
</div>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/SyntaxHighlighter/shCore-src.js"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/ZeroClipboard/ZeroClipboard.js"></script>
<script type="text/javascript" src="http://static.blog.csdn.net/scripts/article_code.js"></script>

<script type="text/javascript" src="http://medal.blog.csdn.net/scripts/show.js"></script>
<script type="text/javascript" src="http://medal.blog.csdn.net/showblogmedal.ashx?blogid=12686"></script>
<script type="text/javascript">document.write("<img src=http://counter.csdn.net/pv.aspx?id=24 border=0 width=0 height=0>");</script>

<script type="text/javascript" src="http://csdnimg.cn/pubfooter/js/publib_footer.js"></script>

<script type="text/javascript" src="http://www.csdn.net/ui/scripts/Csdn/counter.js"></script>

<!--ad.csdn.net-->
<script type="text/javascript" src="http://ad.csdn.net/scripts/ad-blog.js"></script>



</div>
</body>
</html>